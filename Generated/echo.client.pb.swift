/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: echo.proto
 *
 */

/*
 * Copyright 2017, gRPC Authors All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import Foundation
import SwiftGRPC

public class EchoService {
    
    /// Get (Unary)
    public static func Get(request: GREchoRequest, completion: @escaping (GREchoResponse) -> Void, failure: @escaping (Error) -> Void) {

        guard let grpcEngine = grpcEngine else { return }

        let api = "/echo.Echo/Get"
        
        debugEngine?.debugData.append("-------------Start-------------------" as AnyObject)
        debugEngine?.debugData.append("api: " + "\(api)" as AnyObject)
        debugEngine?.debugData.append("metadata: \n" + grpcEngine.grpcClient.metadata.description as AnyObject)

        let result = grpcEngine.grpcClient.needLimit(api: api)
        guard !result.0 else {
            let error = GRPCError(errorCode: 100001, errorUserInfo: [NSLocalizedDescriptionKey:""])
            failure(result.1 ?? error)
            return
        }

        do{
            
            let requestData = try request.serializedData()
            let requestMetadata = grpcEngine.grpcClient.metadata
            let call = grpcEngine.grpcClient.channel.makeCall(api)
            
            debugPrint(api, "req:", request)
            debugEngine?.debugData.append("req: " as AnyObject)
            debugEngine?.debugData.append(request as AnyObject)
            
            try call.ezPerform(message: requestData, metadata: requestMetadata) { (callResult) in
                
                if let responseData = callResult.resultData, let response = try? GREchoResponse(serializedData:responseData) {
                    DispatchQueue.main.async {
                        completion(response)
                    }
                    debugPrint(api, "resp:", response)
                    debugEngine?.debugData.append("resp:" as AnyObject)
                    debugEngine?.debugData.append(response as AnyObject)
                    debugEngine?.debugData.append("-------------End-------------------" as AnyObject)
                } else {
                    let error = GRPCError(errorCode: callResult.statusCode, errorUserInfo: [NSLocalizedDescriptionKey: callResult.statusMessage ?? ""])
                    DispatchQueue.main.async {
                        failure(error)
                    }
                    debugPrint(api, "error:", error)
                    debugEngine?.debugData.append("error: " + "\(error)" as AnyObject)
                    debugEngine?.debugData.append("-------------End-------------------" as AnyObject)
                }
            }
        } catch let error {
            DispatchQueue.main.async {
                failure(error)
            }
            debugPrint(api, "error:", error)
            debugEngine?.debugData.append("error: " + "\(error)" as AnyObject)
            debugEngine?.debugData.append("-------------End-------------------" as AnyObject)
        }
    }

}

