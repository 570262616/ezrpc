//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: echo.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import GRPC
import NIO
import NIOHTTP1
import SwiftProtobuf


public final class GRAppClient {

  /// Asynchronous unary call to Search.
  ///
  /// - Parameters:
  ///   - request: Request to send to Search.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  @discardableResult
  public static func search(_ request: GRAppSearch, completion: @escaping (GRAppSearchResp) -> Void, failure: @escaping (Error) -> Void) -> Bool {
    guard let grpcEngine = grpcEngine  else { return false }
    let client = grpcEngine.client
    let call = client.makeUnaryCall(path: "/spk.App/Search",
                              request: request,
                              callOptions: client.defaultCallOptions, responseType: GRAppSearchResp.self)
    call.response.whenComplete { (result) in
       switch result {
           case .success(let resp):
               debugPrint("/spk.App/Search resp:", resp)
               DispatchQueue.main.async { completion(resp) }
           case .failure(let error):
               debugPrint("/spk.App/Search error", error)
               DispatchQueue.main.async { failure(error) }
       }
    }
    return true
  }

}


// Provides conformance to `GRPCPayload` for request and response messages
extension GRAppSearch: GRPCProtobufPayload {}
extension GRAppSearchResp: GRPCProtobufPayload {}

