//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: echo.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import GRPC
import NIO
import NIOHTTP1
import SwiftProtobuf


/// Usage: instantiate GRAppServiceClient, then call methods of this protocol to make API calls.
public protocol GRAppService {
  func search(_ request: GRAppSearch, callOptions: CallOptions?) -> UnaryCall<GRAppSearch, GRAppSearchResp>
}

public final class GRAppServiceClient: GRPCClient, GRAppService {

  /// Asynchronous unary call to Search.
  ///
  /// - Parameters:
  ///   - request: Request to send to Search.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  @discardableResult
  public static func search(_ request: GRAppSearch, completion: @escaping (GRAppSearchResp) -> Void, failure: @escaping (Error) -> Void) -> UnaryCall<GRAppSearch, GRAppSearchResp> {
    let client = GRAppServiceClient(connection: grpcEngine.makeClientConnection(), defaultCallOptions: grpcEngine.makeOptions())
    let call = client.makeUnaryCall(path: "/spk.App/Search",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
    call.response.whenComplete { (result) in
       switch result {
           case .success(let resp):
               completion(resp)
           case .failure(let error):
               failure(error)
       }
    }
    return call
  }

}

