//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: EchoModel/echo.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
package usermsgcenter

import com.daigou.model.grpc.TGrpc
import com.ezbuy.core.network.EzbuyStreamObserver
import com.google.protobuf.*
import io.grpc.MethodDescriptor
import io.grpc.MethodDescriptor.MethodType
import io.grpc.protobuf.lite.ProtoLiteUtils
import io.grpc.stub.ClientCalls
import com.daigou.sg.rpc.message.Echo.UserDeleteMessagesRequest
import com.daigou.sg.rpc.message.Echo.UserDeleteMessagesResponse
import com.daigou.sg.rpc.message.Echo.UserGetMessagesRequest
import com.daigou.sg.rpc.message.Echo.UserGetMessagesResponse
import com.daigou.sg.rpc.message.Echo.UserGetUnreadMessageCountRequest
import com.daigou.sg.rpc.message.Echo.UserGetUnreadMessageCountResponse
import com.daigou.sg.rpc.message.Echo.UserSetAllMessagesReadRequest
import com.daigou.sg.rpc.message.Echo.UserSetAllMessagesReadResponse
import com.daigou.sg.rpc.message.Echo.UserSetMessageReadRequest
import com.daigou.sg.rpc.message.Echo.UserSetMessageReadResponse
import com.daigou.sg.rpc.message.Echo.UserSetMessagesReadRequest
import com.daigou.sg.rpc.message.Echo.UserSetMessagesReadResponse
import com.daigou.sg.rpc.common.CommonClass.Common
import com.daigou.sg.rpc.common.CommonClass.Empty



object CustomerMessageClient {

  /// Asynchronous unary call to UserDeleteMessages.
  ///
  /// - Parameters:
  ///   - request: Request to send to UserDeleteMessages.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  fun UserDeleteMessages(request: UserDeleteMessagesRequest, listener: EzbuyStreamObserver<UserDeleteMessagesResponse>) {

    val channel = TGrpc.getInstance().channel
    val callOptions = TGrpc.getInstance().callOptions


    val methodDescriptor = MethodDescriptor.create(MethodType.UNARY,
                              MethodDescriptor.generateFullMethodName("usermsgcenter.CustomerMessage", "UserDeleteMessages"),
                              ProtoLiteUtils.marshaller(UserDeleteMessagesRequest.getDefaultInstance()),
                              ProtoLiteUtils.marshaller(UserDeleteMessagesResponse.getDefaultInstance()))

    ClientCalls.asyncUnaryCall<UserDeleteMessagesRequest,
    UserDeleteMessagesResponse>(channel.newCall(methodDescriptor, callOptions), request, listener)

  }

  /// Asynchronous unary call to UserGetMessages.
  ///
  /// - Parameters:
  ///   - request: Request to send to UserGetMessages.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  fun UserGetMessages(request: UserGetMessagesRequest, listener: EzbuyStreamObserver<UserGetMessagesResponse>) {

    val channel = TGrpc.getInstance().channel
    val callOptions = TGrpc.getInstance().callOptions


    val methodDescriptor = MethodDescriptor.create(MethodType.UNARY,
                              MethodDescriptor.generateFullMethodName("usermsgcenter.CustomerMessage", "UserGetMessages"),
                              ProtoLiteUtils.marshaller(UserGetMessagesRequest.getDefaultInstance()),
                              ProtoLiteUtils.marshaller(UserGetMessagesResponse.getDefaultInstance()))

    ClientCalls.asyncUnaryCall<UserGetMessagesRequest,
    UserGetMessagesResponse>(channel.newCall(methodDescriptor, callOptions), request, listener)

  }

  /// Asynchronous unary call to UserGetUnreadMessageCount.
  ///
  /// - Parameters:
  ///   - request: Request to send to UserGetUnreadMessageCount.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  fun UserGetUnreadMessageCount(request: UserGetUnreadMessageCountRequest, listener: EzbuyStreamObserver<UserGetUnreadMessageCountResponse>) {

    val channel = TGrpc.getInstance().channel
    val callOptions = TGrpc.getInstance().callOptions


    val methodDescriptor = MethodDescriptor.create(MethodType.UNARY,
                              MethodDescriptor.generateFullMethodName("usermsgcenter.CustomerMessage", "UserGetUnreadMessageCount"),
                              ProtoLiteUtils.marshaller(UserGetUnreadMessageCountRequest.getDefaultInstance()),
                              ProtoLiteUtils.marshaller(UserGetUnreadMessageCountResponse.getDefaultInstance()))

    ClientCalls.asyncUnaryCall<UserGetUnreadMessageCountRequest,
    UserGetUnreadMessageCountResponse>(channel.newCall(methodDescriptor, callOptions), request, listener)

  }

  /// Asynchronous unary call to UserSetAllMessagesRead.
  ///
  /// - Parameters:
  ///   - request: Request to send to UserSetAllMessagesRead.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  fun UserSetAllMessagesRead(request: UserSetAllMessagesReadRequest, listener: EzbuyStreamObserver<UserSetAllMessagesReadResponse>) {

    val channel = TGrpc.getInstance().channel
    val callOptions = TGrpc.getInstance().callOptions


    val methodDescriptor = MethodDescriptor.create(MethodType.UNARY,
                              MethodDescriptor.generateFullMethodName("usermsgcenter.CustomerMessage", "UserSetAllMessagesRead"),
                              ProtoLiteUtils.marshaller(UserSetAllMessagesReadRequest.getDefaultInstance()),
                              ProtoLiteUtils.marshaller(UserSetAllMessagesReadResponse.getDefaultInstance()))

    ClientCalls.asyncUnaryCall<UserSetAllMessagesReadRequest,
    UserSetAllMessagesReadResponse>(channel.newCall(methodDescriptor, callOptions), request, listener)

  }

  /// Asynchronous unary call to UserSetMessageRead.
  ///
  /// - Parameters:
  ///   - request: Request to send to UserSetMessageRead.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  fun UserSetMessageRead(request: UserSetMessageReadRequest, listener: EzbuyStreamObserver<UserSetMessageReadResponse>) {

    val channel = TGrpc.getInstance().channel
    val callOptions = TGrpc.getInstance().callOptions


    val methodDescriptor = MethodDescriptor.create(MethodType.UNARY,
                              MethodDescriptor.generateFullMethodName("usermsgcenter.CustomerMessage", "UserSetMessageRead"),
                              ProtoLiteUtils.marshaller(UserSetMessageReadRequest.getDefaultInstance()),
                              ProtoLiteUtils.marshaller(UserSetMessageReadResponse.getDefaultInstance()))

    ClientCalls.asyncUnaryCall<UserSetMessageReadRequest,
    UserSetMessageReadResponse>(channel.newCall(methodDescriptor, callOptions), request, listener)

  }

  /// Asynchronous unary call to UserSetMessagesRead.
  ///
  /// - Parameters:
  ///   - request: Request to send to UserSetMessagesRead.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  fun UserSetMessagesRead(request: UserSetMessagesReadRequest, listener: EzbuyStreamObserver<UserSetMessagesReadResponse>) {

    val channel = TGrpc.getInstance().channel
    val callOptions = TGrpc.getInstance().callOptions


    val methodDescriptor = MethodDescriptor.create(MethodType.UNARY,
                              MethodDescriptor.generateFullMethodName("usermsgcenter.CustomerMessage", "UserSetMessagesRead"),
                              ProtoLiteUtils.marshaller(UserSetMessagesReadRequest.getDefaultInstance()),
                              ProtoLiteUtils.marshaller(UserSetMessagesReadResponse.getDefaultInstance()))

    ClientCalls.asyncUnaryCall<UserSetMessagesReadRequest,
    UserSetMessagesReadResponse>(channel.newCall(methodDescriptor, callOptions), request, listener)

  }

  /// Asynchronous unary call to Test.
  ///
  /// - Parameters:
  ///   - request: Request to send to Test.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  fun Test(request: Common, listener: EzbuyStreamObserver<Empty>) {

    val channel = TGrpc.getInstance().channel
    val callOptions = TGrpc.getInstance().callOptions


    val methodDescriptor = MethodDescriptor.create(MethodType.UNARY,
                              MethodDescriptor.generateFullMethodName("usermsgcenter.CustomerMessage", "Test"),
                              ProtoLiteUtils.marshaller(Common.getDefaultInstance()),
                              ProtoLiteUtils.marshaller(Empty.getDefaultInstance()))

    ClientCalls.asyncUnaryCall<Common,
    Empty>(channel.newCall(methodDescriptor, callOptions), request, listener)

  }

}


