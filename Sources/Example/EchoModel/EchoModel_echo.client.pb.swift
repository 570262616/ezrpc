//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: EchoModel/echo.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import GRPC
import NIO
import NIOHTTP1
import SwiftProtobuf


object UMCCustomerMessageClient {

  /// Asynchronous unary call to UserDeleteMessages.
  ///
  /// - Parameters:
  ///   - request: Request to send to UserDeleteMessages.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  fun UserDeleteMessages(request: UMCUserDeleteMessagesRequest}, listener: EzbuyStreamObserver<UMCUserDeleteMessagesResponse>) {
    val channel = TGrpc.getInstance().channel
    val callOptions = TGrpc.getInstance().callOptions
    val methodName = "/usermsgcenter.CustomerMessage/UserDeleteMessages


    val methodDescriptor = MethodDescriptor.create(MethodType.UNARY, MethodDescriptor.generateFullMethodName("/usermsgcenter.CustomerMessage/UserDeleteMessages",
                              ProtoLiteUtils.marshaller(UMCUserDeleteMessagesRequest.getDefaultInstance()), ProtoLiteUtils.marshaller(UMCUserDeleteMessagesResponse.getDefaultInstance()))

    ClientCalls.asyncUnaryCall<UMCUserDeleteMessagesRequest,
    UMCUserDeleteMessagesResponse>(channel.newCall(methodDescriptor, callOptions), request, listener)

  }

  /// Asynchronous unary call to UserGetMessages.
  ///
  /// - Parameters:
  ///   - request: Request to send to UserGetMessages.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  fun UserGetMessages(request: UMCUserGetMessagesRequest}, listener: EzbuyStreamObserver<UMCUserGetMessagesResponse>) {
    val channel = TGrpc.getInstance().channel
    val callOptions = TGrpc.getInstance().callOptions
    val methodName = "/usermsgcenter.CustomerMessage/UserGetMessages


    val methodDescriptor = MethodDescriptor.create(MethodType.UNARY, MethodDescriptor.generateFullMethodName("/usermsgcenter.CustomerMessage/UserGetMessages",
                              ProtoLiteUtils.marshaller(UMCUserGetMessagesRequest.getDefaultInstance()), ProtoLiteUtils.marshaller(UMCUserGetMessagesResponse.getDefaultInstance()))

    ClientCalls.asyncUnaryCall<UMCUserGetMessagesRequest,
    UMCUserGetMessagesResponse>(channel.newCall(methodDescriptor, callOptions), request, listener)

  }

  /// Asynchronous unary call to UserGetUnreadMessageCount.
  ///
  /// - Parameters:
  ///   - request: Request to send to UserGetUnreadMessageCount.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  fun UserGetUnreadMessageCount(request: UMCUserGetUnreadMessageCountRequest}, listener: EzbuyStreamObserver<UMCUserGetUnreadMessageCountResponse>) {
    val channel = TGrpc.getInstance().channel
    val callOptions = TGrpc.getInstance().callOptions
    val methodName = "/usermsgcenter.CustomerMessage/UserGetUnreadMessageCount


    val methodDescriptor = MethodDescriptor.create(MethodType.UNARY, MethodDescriptor.generateFullMethodName("/usermsgcenter.CustomerMessage/UserGetUnreadMessageCount",
                              ProtoLiteUtils.marshaller(UMCUserGetUnreadMessageCountRequest.getDefaultInstance()), ProtoLiteUtils.marshaller(UMCUserGetUnreadMessageCountResponse.getDefaultInstance()))

    ClientCalls.asyncUnaryCall<UMCUserGetUnreadMessageCountRequest,
    UMCUserGetUnreadMessageCountResponse>(channel.newCall(methodDescriptor, callOptions), request, listener)

  }

  /// Asynchronous unary call to UserSetAllMessagesRead.
  ///
  /// - Parameters:
  ///   - request: Request to send to UserSetAllMessagesRead.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  fun UserSetAllMessagesRead(request: UMCUserSetAllMessagesReadRequest}, listener: EzbuyStreamObserver<UMCUserSetAllMessagesReadResponse>) {
    val channel = TGrpc.getInstance().channel
    val callOptions = TGrpc.getInstance().callOptions
    val methodName = "/usermsgcenter.CustomerMessage/UserSetAllMessagesRead


    val methodDescriptor = MethodDescriptor.create(MethodType.UNARY, MethodDescriptor.generateFullMethodName("/usermsgcenter.CustomerMessage/UserSetAllMessagesRead",
                              ProtoLiteUtils.marshaller(UMCUserSetAllMessagesReadRequest.getDefaultInstance()), ProtoLiteUtils.marshaller(UMCUserSetAllMessagesReadResponse.getDefaultInstance()))

    ClientCalls.asyncUnaryCall<UMCUserSetAllMessagesReadRequest,
    UMCUserSetAllMessagesReadResponse>(channel.newCall(methodDescriptor, callOptions), request, listener)

  }

  /// Asynchronous unary call to UserSetMessageRead.
  ///
  /// - Parameters:
  ///   - request: Request to send to UserSetMessageRead.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  fun UserSetMessageRead(request: UMCUserSetMessageReadRequest}, listener: EzbuyStreamObserver<UMCUserSetMessageReadResponse>) {
    val channel = TGrpc.getInstance().channel
    val callOptions = TGrpc.getInstance().callOptions
    val methodName = "/usermsgcenter.CustomerMessage/UserSetMessageRead


    val methodDescriptor = MethodDescriptor.create(MethodType.UNARY, MethodDescriptor.generateFullMethodName("/usermsgcenter.CustomerMessage/UserSetMessageRead",
                              ProtoLiteUtils.marshaller(UMCUserSetMessageReadRequest.getDefaultInstance()), ProtoLiteUtils.marshaller(UMCUserSetMessageReadResponse.getDefaultInstance()))

    ClientCalls.asyncUnaryCall<UMCUserSetMessageReadRequest,
    UMCUserSetMessageReadResponse>(channel.newCall(methodDescriptor, callOptions), request, listener)

  }

  /// Asynchronous unary call to UserSetMessagesRead.
  ///
  /// - Parameters:
  ///   - request: Request to send to UserSetMessagesRead.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  fun UserSetMessagesRead(request: UMCUserSetMessagesReadRequest}, listener: EzbuyStreamObserver<UMCUserSetMessagesReadResponse>) {
    val channel = TGrpc.getInstance().channel
    val callOptions = TGrpc.getInstance().callOptions
    val methodName = "/usermsgcenter.CustomerMessage/UserSetMessagesRead


    val methodDescriptor = MethodDescriptor.create(MethodType.UNARY, MethodDescriptor.generateFullMethodName("/usermsgcenter.CustomerMessage/UserSetMessagesRead",
                              ProtoLiteUtils.marshaller(UMCUserSetMessagesReadRequest.getDefaultInstance()), ProtoLiteUtils.marshaller(UMCUserSetMessagesReadResponse.getDefaultInstance()))

    ClientCalls.asyncUnaryCall<UMCUserSetMessagesReadRequest,
    UMCUserSetMessagesReadResponse>(channel.newCall(methodDescriptor, callOptions), request, listener)

  }

  /// Asynchronous unary call to Test.
  ///
  /// - Parameters:
  ///   - request: Request to send to Test.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  fun Test(request: UMCUserSetMessagesReadRequest}, listener: EzbuyStreamObserver<COEmpty>) {
    val channel = TGrpc.getInstance().channel
    val callOptions = TGrpc.getInstance().callOptions
    val methodName = "/usermsgcenter.CustomerMessage/Test


    val methodDescriptor = MethodDescriptor.create(MethodType.UNARY, MethodDescriptor.generateFullMethodName("/usermsgcenter.CustomerMessage/Test",
                              ProtoLiteUtils.marshaller(UMCUserSetMessagesReadRequest.getDefaultInstance()), ProtoLiteUtils.marshaller(COEmpty.getDefaultInstance()))

    ClientCalls.asyncUnaryCall<UMCUserSetMessagesReadRequest,
    COEmpty>(channel.newCall(methodDescriptor, callOptions), request, listener)

  }

}


// Provides conformance to `GRPCPayload` for request and response messages
extension UMCUserDeleteMessagesRequest: GRPCProtobufPayload {}
extension UMCUserDeleteMessagesResponse: GRPCProtobufPayload {}
extension UMCUserGetMessagesRequest: GRPCProtobufPayload {}
extension UMCUserGetMessagesResponse: GRPCProtobufPayload {}
extension UMCUserGetUnreadMessageCountRequest: GRPCProtobufPayload {}
extension UMCUserGetUnreadMessageCountResponse: GRPCProtobufPayload {}
extension UMCUserSetAllMessagesReadRequest: GRPCProtobufPayload {}
extension UMCUserSetAllMessagesReadResponse: GRPCProtobufPayload {}
extension UMCUserSetMessageReadRequest: GRPCProtobufPayload {}
extension UMCUserSetMessageReadResponse: GRPCProtobufPayload {}
extension UMCUserSetMessagesReadRequest: GRPCProtobufPayload {}
extension UMCUserSetMessagesReadResponse: GRPCProtobufPayload {}

